akka {
    extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  actor {
    provider = "cluster"
    serializers {
          kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
        }

        serialization-bindings {
              "java.lang.String" = kryo
              "scanner.actors.messages.ScanUserProfileMsg" = kryo
              "scanner.actors.messages.SimpleMessages" = kryo
              "scanner.actors.messages.AddFakeUserMsg" = kryo
              "scanner.actors.messages.SetFreeFakeUserMsg" = kryo
              "scanner.actors.messages.ResultGetFreeFakeUserMsg" = kryo
              "scanner.actors.messages.LoginSuccessfulMsg" = kryo
              "scanner.actors.messages.ScanUserFollowerMsg" = kryo
            }

     kryo  {
           # Whether Kryo should support object graph serialization
           # true: Kryo supports serialization of object graphs with shared nodes
           # and cyclic references, but this comes at the expense of a small overhead
           # false: Kryo does not support object grpahs with shared nodes, but is usually faster
           reference-enabled = true

           # Whether Kryo should support implicit class registration
           # true: Kryo supports implicit class registration. Class can be serialized and deserialized
           # without pre-registration but with lower efficiency.
           # false: Kryo does not support implicit class registration. It will throw an exception when
           # an unregistered class needs to be serialized or deserialized.
           implicit-registration-enabled = true

           # Log implicitly registered classes. Useful, if you want to know all classes
           # which are serialized
           implicit-registration-logging = true

           # Define a default size for byte buffers used during serialization
           buffer-size = 4096

           # Define max size for byte buffers used during serialization
           # 1073741824 == 1G
           max-buffer-size = 1073741824

           # Define a default size for serializer pool
           serializer-pool-size = 16

           # If enabled, Kryo logs a lot of information about serialization process.
           # Useful for debugging and lowl-level tweaking
           kryo-trace = false

           # If enabled, Kryo uses internally a map detecting shared nodes.
           # This is a preferred mode for big object graphs with a lot of nodes.
           # For small object graphs (e.g. below 10 nodes) set it to false for
           # better performance.
           kryo-reference-map = true

           # Define mappings from a fully qualified class name to a numeric id.
           # Smaller ids lead to smaller sizes of serialized representations.
           # The smallest possible id should start at 9 (or even higher), because
           # ids below it are used by Kryo internally.
           # This section is optional.
           mappings {
               # fully.qualified.classname1 = id1
               # fully.qualified.classname2 = id2
           }

           # Define a set of fully qualified class names for
           # classes to be used for serialization.
           # The ids for those classes will be assigned automatically,
           # but respecting the order of declaration in this section.
           # This section is optional.
           classes = [
                "scanner.actors.messages.ScanUserProfileMsg",
                "scanner.actors.messages.SimpleMessages",
                "scanner.actors.messages.AddFakeUserMsg",
                "scanner.actors.messages.SetFreeFakeUserMsg",
                "scanner.actors.messages.ResultGetFreeFakeUserMsg",
                "scanner.actors.messages.LoginSuccessfulMsg",
                "scanner.actors.messages.ScanUserFollowerMsg",
                "scanner.dto.Instagram4jDTO",
                "java.util.HashMap",
           ]
       }
  }
  remote {
    maximum-payload-bytes = 640000 bytes
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
      message-frame-size =  640000b
      send-buffer-size =  640000b
      receive-buffer-size =  640000b
      maximum-frame-size = 640000b
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://dump-system@127.0.0.1:2551",
      "akka.tcp://dump-system@127.0.0.1:2552"]
  }
}

# Enable metrics extension in akka-cluster-metrics.
#akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
#akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native

akka.cluster.singleton {
  # The actor name of the child singleton actor.
  singleton-name = "fakeUserManager"

  # Singleton among the nodes tagged with specified role.
  # If the role is not specified it's a singleton among all nodes in the cluster.
  role = ""

  # When a node is becoming oldest it sends hand-over request to previous oldest,
  # that might be leaving the cluster. This is retried with this interval until
  # the previous oldest confirms that the hand over has started or the previous
  # oldest member is removed from the cluster (+ akka.cluster.down-removal-margin).
  hand-over-retry-interval = 1s

  # The number of retries are derived from hand-over-retry-interval and
  # akka.cluster.down-removal-margin (or ClusterSingletonManagerSettings.removalMargin),
  # but it will never be less than this property.
  min-number-of-hand-over-retries = 10
}

akka.cluster.singleton-proxy {
  # The actor name of the singleton actor that is started by the ClusterSingletonManager
  singleton-name = ${akka.cluster.singleton.singleton-name}

  # The role of the cluster nodes where the singleton can be deployed.
  # If the role is not specified then any node will do.
  role = ""

  # Interval at which the proxy will try to resolve the singleton instance.
  singleton-identification-interval = 1s

  # If the location of the singleton is unknown the proxy will buffer this
  # number of messages and deliver them when the singleton is identified.
  # When the buffer is full old messages will be dropped when new messages are
  # sent via the proxy.
  # Use 0 to disable buffering, i.e. messages will be dropped immediately if
  # the location of the singleton is unknown.
  # Maximum allowed buffer size is 10000.
  buffer-size = 1000
}